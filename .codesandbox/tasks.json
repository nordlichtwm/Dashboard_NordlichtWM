"use client";

import { useState } from "react";
import {
  Chart as ChartJS,
  LineElement,
  CategoryScale,
  LinearScale,
  PointElement,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";
import { Line, Pie } from "react-chartjs-2";

ChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend, ArcElement);

export default function Page() {
  const [investment, setInvestment] = useState(100000);
  const [horizon, setHorizon] = useState(20);
  const [strategy, setStrategy] = useState("Balanced");

  const strategies = {
    Conservative: { return: 0.044, volatility: 0.02, baskets: [60, 33, 5] },
    Balanced: { return: 0.06, volatility: 0.03, baskets: [50, 38, 10] },
    Growth: { return: 0.09, volatility: 0.05, baskets: [35, 48, 15] },
    Aggressive: { return: 0.12, volatility: 0.07, baskets: [20, 53, 25] },
    Custom: { return: 0.07, volatility: 0.04, baskets: [50, 40, 10] },
  };

  const { return: r, volatility: v, baskets } = strategies[strategy];
  const riskScore = (baskets[0] * 2 + baskets[1] * 5 + baskets[2] * 6) / 100;

  // Expected, Worst, Best arrays
  const expected = [{ year: 0, value: investment, growth: "-" }];
  const worst = [{ year: 0, value: investment }];
  const best = [{ year: 0, value: investment }];

  let e = investment, w = investment, b = investment;
  for (let i = 1; i <= horizon; i++) {
    e = e * (1 + r);
    w = w * (1 + (r - v));
    b = b * (1 + (r + v));
    const growth = ((e / investment) ** (1 / i) - 1) * 100;
    expected.push({ year: i, value: Math.round(e), growth: `${growth.toFixed(1)}%` });
    worst.push({ year: i, value: Math.round(w) });
    best.push({ year: i, value: Math.round(b) });
  }

  const chartData = {
    labels: expected.map(e => e.year),
    datasets: [
      {
        label: "Erwartet",
        data: expected.map(e => e.value),
        borderColor: "#3B82F6",
        tension: 0.3,
      },
      {
        label: "Schlecht",
        data: worst.map(w => w.value),
        borderColor: "#EF4444",
        tension: 0.3,
      },
      {
        label: "Gut",
        data: best.map(b => b.value),
        borderColor: "#10B981",
        tension: 0.3,
      },
    ],
  };

  const pieDataAssets = {
    labels: ["Fixed Income", "Equity+", "Digital Assets"],
    datasets: [
      {
        data: baskets,
        backgroundColor: ["#3B82F6", "#10B981", "#F59E0B"],
      },
    ],
  };

  const pieDataCurrency = {
    labels: ["CHF", "USD", "Digital"],
    datasets: [
      {
        data: [baskets[0], baskets[1] * 0.7, baskets[1] * 0.3 + baskets[2]],
        backgroundColor: ["#3B82F6", "#10B981", "#F59E0B"],
      },
    ],
  };

  return (
    <main className="min-h-screen bg-gray-100 p-10 flex flex-col space-y-8">
      <div className="grid md:grid-cols-3 gap-6">
        {/* Sidebar */}
        <div className="bg-white p-6 rounded-xl shadow space-y-4">
          <h2 className="font-bold text-lg">Ihre Anlagedetails</h2>
          <div>
            <label className="text-sm">Startbetrag (CHF)</label>
            <input
              type="number"
              value={investment}
              onChange={e => setInvestment(Number(e.target.value))}
              className="w-full border rounded p-2 mt-1"
            />
          </div>
          <div>
            <label className="text-sm">Anlagehorizont (Jahre)</label>
            <input
              type="range"
              min="1"
              max="30"
              value={horizon}
              onChange={e => setHorizon(Number(e.target.value))}
              className="w-full"
            />
            <div className="text-sm text-right">{horizon} Jahre</div>
          </div>
          <div>
            <label className="text-sm">Anlagestrategie</label>
            <select
              value={strategy}
              onChange={e => setStrategy(e.target.value)}
              className="w-full border rounded p-2 mt-1"
            >
              {Object.keys(strategies).map(s => (
                <option key={s}>{s}</option>
              ))}
            </select>
          </div>

          {/* Risiko-Profil */}
          <div className="mt-6">
            <h3 className="font-semibold mb-2">Risikoprofil</h3>
            <label className="text-xs">Volatilität</label>
            <div className="w-full bg-gray-200 rounded h-2 mb-2">
              <div
                className="bg-blue-500 h-2 rounded"
                style={{ width: `${v * 100}%` }}
              ></div>
            </div>
            <label className="text-xs">Rendite-Potenzial</label>
            <div className="w-full bg-gray-200 rounded h-2 mb-2">
              <div
                className="bg-green-500 h-2 rounded"
                style={{ width: `${r * 100}%` }}
              ></div>
            </div>
            <p className="text-xs">Risiko-Score: {riskScore.toFixed(2)}</p>
          </div>

          {/* Basket Allokation */}
          <div className="mt-6">
            <h3 className="font-semibold mb-2">Basket-Allokation</h3>
            <ul className="text-xs space-y-1">
              <li>Cash: 2%</li>
              <li>Fixed Income: {baskets[0]}%</li>
              <li>Equity+: {baskets[1]}%</li>
              <li>Digital Assets: {baskets[2]}%</li>
            </ul>
          </div>
        </div>

        {/* Chart */}
        <div className="md:col-span-2 bg-white p-6 rounded-xl shadow">
          <h2 className="font-bold text-lg mb-4">Vermögensentwicklung</h2>
          <Line data={chartData} />
        </div>
      </div>

      {/* Table */}
      <div className="bg-white p-6 rounded-xl shadow overflow-x-auto">
        <h2 className="font-bold mb-4">Erwartet / Schlecht / Gut</h2>
        <table className="min-w-full text-sm">
          <thead>
            <tr className="border-b">
              <th className="text-left px-2">Jahr</th>
              <th className="text-left px-2">Erwartet</th>
              <th className="text-left px-2">Schlecht</th>
              <th className="text-left px-2">Gut</th>
              <th className="text-left px-2">Rendite (p.a.)</th>
            </tr>
          </thead>
          <tbody>
            {expected.map((e, i) => (
              <tr key={i} className="border-b">
                <td className="px-2">{e.year}</td>
                <td className="px-2">CHF {e.value.toLocaleString()}</td>
                <td className="px-2">CHF {worst[i].value.toLocaleString()}</td>
                <td className="px-2">CHF {best[i].value.toLocaleString()}</td>
                <td className="px-2">{e.growth}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Summary & Pies */}
      <div className="grid md:grid-cols-3 gap-6">
        <div className="bg-white p-6 rounded-xl shadow text-center">
          <h2 className="font-bold text-sm mb-2">Zusammenfassung</h2>
          <p className="text-xl font-bold text-blue-600">
            CHF {expected[expected.length - 1].value.toLocaleString()}
          </p>
          <p className="text-xs">
            +{((expected[expected.length - 1].value / investment - 1) * 100).toFixed(0)}% ({(r * 100).toFixed(1)}% p.a.)
          </p>
        </div>
        <div className="bg-white p-6 rounded-xl shadow">
          <h2 className="font-bold text-sm mb-2">Asset-Allokation</h2>
          <Pie data={pieDataAssets} />
        </div>
        <div className="bg-white p-6 rounded-xl shadow">
          <h2 className="font-bold text-sm mb-2">Währungs-Allokation</h2>
          <Pie data={pieDataCurrency} />
        </div>
      </div>
    </main>
  );
}
